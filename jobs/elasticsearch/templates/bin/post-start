#!/bin/bash
# Inspired by https://github.com/cloudfoundry/exemplar-release/blob/master/jobs/paragon/templates/post-start
# If a command fails, exit immediately
set -e

export timeout=200
export polling_frequency=1

export max_attempts=$((timeout / polling_frequency))
export attempts=0
out=$(mktemp health-XXXXXX)

while [[ "$max_attempts" -ge "$attempts" ]]; do
    set +e
    echo "attempt $attempts"
    <% if p("elasticsearch.node.allow_data") and not p("elasticsearch.node.allow_master") %>
    curl -s -f --max-time $timeout -sw '\n%{http_code}' http://127.0.0.1:9200/_cluster/health > ${out}
    <% else %>
    curl -s -f --max-time $timeout -sw '\n%{http_code}' http://127.0.0.1:9200/_cluster/health?local=true > ${out}
    <% end %>
    body=$(cat ${out} | head -n -1)
    status=$(cat ${out} | tail -n 1)
    echo "body: ${body}"
    echo "status: ${status}"
    if [[ "${status}" = "200" && `echo ${body} | python -c 'import json,sys;print json.load(sys.stdin)["status"]'` = "green" ]]; then
        rm ${out}
        # https://github.com/cloudfoundry-community/logsearch-boshrelease/pull/39
        <% if p("elasticsearch.node.allow_data") %>
        curl -X PUT -s -H 'Content-Type: application/json' http://127.0.0.1:9200/_all/_settings \
          -d '{"settings": {"index.unassigned.node_left.delayed_timeout": "1m"}}'
        <% end %>
        exit 0
    fi
    set -e

    attempts=$(($attempts + 1))

    sleep "$polling_frequency"
done

rm ${out}
exit 1

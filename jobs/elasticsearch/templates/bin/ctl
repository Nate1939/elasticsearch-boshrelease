#!/bin/bash

RUN_DIR=/var/vcap/sys/run/elasticsearch
LOG_DIR=/var/vcap/sys/log/elasticsearch
STORE_DIR=/var/vcap/store/elasticsearch
JOB_DIR=/var/vcap/jobs/elasticsearch
PIDFILE=$RUN_DIR/elasticsearch.pid
RUNAS=vcap

export JAVA_HOME=/var/vcap/packages/java
export PATH=$PATH:$JAVA_HOME/bin

export ES_PATH_CONF=${JOB_DIR}/config

function pid_is_running() {
  declare pid="$1"
  ps -p "${pid}" >/dev/null 2>&1
}

function pid_guard() {
  declare pidfile="$1" name="$2"

  echo "------------ STARTING $(basename "$0") at $(date) --------------" | tee /dev/stderr

  if [ ! -f "${pidfile}" ]; then
    return 0
  fi

  local pid
  pid=$(head -1 "${pidfile}")

  if pid_is_running "${pid}"; then
    echo "${name} is already running, please stop it first"
    exit 1
  fi

  echo "Removing stale pidfile"
  rm "${pidfile}"
}

case $1 in

  start)
    mkdir -p $RUN_DIR $LOG_DIR $STORE_DIR

    pid_guard $PIDFILE $JOB_NAME

    chown -R $RUNAS:$RUNAS $RUN_DIR $LOG_DIR $STORE_DIR ${JOB_DIR}/config

    ulimit -n <%= p("elasticsearch.limits.fd") %>
    ulimit -l unlimited
    sysctl -q -w vm.max_map_count=262144

    exec chpst -u $RUNAS:$RUNAS \
       /var/vcap/packages/elasticsearch/bin/elasticsearch \
      -p $PIDFILE \
      <%= p("elasticsearch.exec.options", []).join(' ') %> \
      >>$LOG_DIR/elasticsearch.stdout.log 2>>$LOG_DIR/elasticsearch.stderr.log
    ;;

  stop)
    PID=$(head -1 $PIDFILE)
    if [ ! -z $PID ] && pid_is_running $PID; then
      kill $PID
    fi
    while [ -e /proc/$PID ]; do sleep 0.1; done
    rm -f $PIDFILE
    ;;

  *)
  echo "Usage: ctl {start|stop|console}" ;;
esac
exit 0
